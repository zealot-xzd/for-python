pipenv是requests库作者Kenneth Reitz编写的一个用于创建和管理Python虚拟环境的工具。

Pipenv是Python官方机构推荐的Python包工具。

我们知道，为了管理Python虚拟环境，通常用得比较多的是virtualenv和pyenv。但是有人觉得它们还不够好用，不够偷懒。这个人是谁，就是上面的那位。于是他开发了一个pipenv，结合了pip及virtualenv的功能和优点，集成出了pipenv这个工具。其目的是替代virtualenv和pyenv，将pip及virtualenv的功能集于一身。

一、安装pipenv
windows下很简单：

pip install pipenv
Linux下：

sudo pip install pipenv
在苹果操作系统下：

$ brew install pipenv
也就是说，无法用pip管理的包，pipenv同样无法使用。


pipenv依赖：psutil, virtualenv-clone, pew, certifi, urllib3, chardet, requests, mccabe, pyflakes, pycodestyle, flake8等第三方模块。

pipenv有很漂亮的彩色终端界面。

二、简单使用
进入你的Python项目文件夹：

cd your_project
pipenv install
windows操作系统中，虚拟环境创建过程如下：

D:\test\test_pipenv>pipenv install
Creating a virtualenv for this project…
Using base prefix 'c:\\python36'
New python executable in C:\Users\Administrator\.virtualenvs\test_pipenv-XHxuOsj
n\Scripts\python.exe
Installing setuptools, pip, wheel...done.

Virtualenv location: C:\Users\Administrator\.virtualenvs\test_pipenv-XHxuOsjn
Creating a Pipfile for this project…
Pipfile.lock not found, creating…
Locking [dev-packages] dependencies…
Locking [packages] dependencies…
Updated Pipfile.lock (c23e27)!
Installing dependencies from Pipfile.lock (c23e27)…
  ================================ 0/0 - 00:00:00
To activate this project's virtualenv, run the following:
 $ pipenv shell
如果你给命令添加--two或--three参数，它将分别使用Python2或3来初始化你的虚拟环境，否则将使用默认的Python版本。

注意：pipenv默认把虚拟环境的真实文件全都放在了C:\Users\Administrator\.virtualenvs\test_pipenv-XHxuOsjn\Scripts\python.exe中，而在实际的项目文件夹内只创建了两个新文件Pipfile和Pipfile.lock。这可能造成C盘存有大量的文件，不是个好的做法。（但好像无法修改这一路径....）

看一下Pipfile中的内容：

[[source]]

url = "https://pypi.python.org/simple"
verify_ssl = true
name = "pypi"


[packages]


[dev-packages]
最关键的是定义了安装第三方库使用的源，默认为官方的pypi。

而Pipfile.lock文件内容呢？

{
    "_meta": {
        "hash": {
            "sha256": "5f0257fe8c7a73db1c8de519faa92c658282a01087eb2bfafba7962704c23e27"
        },
        "host-environment-markers": {
            "implementation_name": "cpython",
            "implementation_version": "3.6.4",
            "os_name": "nt",
            "platform_machine": "AMD64",
            "platform_python_implementation": "CPython",
            "platform_release": "7",
            "platform_system": "Windows",
            "platform_version": "6.1.7601",
            "python_full_version": "3.6.4",
            "python_version": "3.6",
            "sys_platform": "win32"
        },
        "pipfile-spec": 6,
        "requires": {},
        "sources": [
            {
                "name": "pypi",
                "url": "https://pypi.python.org/simple",
                "verify_ssl": true
            }
        ]
    },
    "default": {},
    "develop": {}
}
初始情况下，文件里只包含一些操作系统的基本信息。

Pipfile和Pipfile.lock两个文件互相配合，完成虚拟环境的管理工作。

防盗链接：本文来自刘江的博客和教程网站http://www.liujiangblog.com/blog/

三、安装第三方模块
Pipfile包含关于项目的依赖包的信息，并取代通常在Python项目中使用的requirements.txt文件。 如果你在具有requirements.txt文件的项目中启动了Pipenv，则在把它从项目中删除之前，应该使用Pipenv安装该requirements中列出的所有依赖包。

使用pipenv创建虚拟环境后，进入pipfile所在目录，使用install命令安装第三方库。 例如：

pipenv install django
这个时候，你其实把pipenv当作pip来使用。无需像virtualenv那样需要额外的先启动虚拟环境。pipenv区分你是在给哪个虚拟环境工作，依赖的是Pipfile文件的位置。

要卸载某个第三方库：

pipenv uninstall beautifulsoup4
四、冻结Pipfile
冻结就相当于将项目所使用的第三方库列表进行打包输出，类似于virtualenv中生成requirements.txt文件。

通过更新Pipfile.lock来冻结库名称及其版本，以及其依赖关系的列表。需要使用lock参数：

pipenv lock
如果另一个用户拷贝了你的项目，他们只需要安装Pipenv，然后：

pipenv install
Pipenv会在项目文件夹下自动寻找Pipfile和Pipfile.lock文件，创建一个新的虚拟环境并安装必要的软件包。

也就是说pipenv install的时候有三种逻辑：

如果目录下没有Pipfile和Pipfile.lock文件，表示创建一个新的虚拟环境；
如果有，表示使用已有的Pipfile和Pipfile.lock文件中的配置创建一个虚拟环境；
如果后面带诸如django这一类库名，表示为当前虚拟环境安装第三方库。
五、管理开发环境
通常有一些Python包只在你的开发环境中需要，而不是在生产环境中，例如单元测试包。 Pipenv使用--dev标志区分两个环境。

pipenv install --dev django
django库现在将只在开发虚拟环境中使用。如果你要在你的生产环境中安装你的项目：

pipenv install
这不会安装django包。

但是，如果有一个开发人员将你的项目克隆到自己的开发环境中，他们可以使用--dev标志，将django也安装：

pipenv install --dev
也就是说一个--dev参数，帮你在同一个虚拟环境中又区分出了开发和非开发环境。

六、在虚拟环境中运行命令
使用run参数，提供要运行的命令：

pipenv run python manage.py runserver
这将使用当前虚拟环境关联的Python解释器，执行命令。

或者简单的执行脚本：

pipenv run python your_script.py
如果你不想每次运行Python时都输入这么多字符，可以在shell中设置一个别名，例如，

alias prp="pipenv run python"
七、pipenv选项解释
pipenv 具有下列的选项：

$ pipenv
Usage: pipenv [OPTIONS] COMMAND [ARGS]...

Options:
  --update         更新Pipenv & pip
  --where          显示项目文件所在路径
  --venv           显示虚拟环境实际文件所在路径
  --py             显示虚拟环境Python解释器所在路径
  --envs           显示虚拟环境的选项变量
  --rm             删除虚拟环境
  --bare           最小化输出
  --completion     完整输出
  --man            显示帮助页面
  --three / --two  使用Python 3/2创建虚拟环境（注意本机已安装的Python版本）
  --python TEXT    指定某个Python版本作为虚拟环境的安装源
  --site-packages  附带安装原Python解释器中的第三方库
  --jumbotron      不知道啥玩意....
  --version        版本信息
  -h, --help       帮助信息
pipenv 可使用的命令参数：

Commands:
  check      检查安全漏洞
  graph      显示当前依赖关系图信息
  install    安装虚拟环境或者第三方库
  lock       锁定并生成Pipfile.lock文件
  open       在编辑器中查看一个库
  run        在虚拟环境中运行命令
  shell      进入虚拟环境
  uninstall  卸载一个库
  update     卸载当前所有的包，并安装它们的最新版本
一些使用例子：

Usage Examples:
   使用Python 3.6创建虚拟环境:
   $ pipenv --python 3.6

   安装包括开发环境中的第三方库:
   $ pipenv install --dev

   锁定pipfile:
   $ pipenv lock --pre

   Install a local setup.py into your virtual environment/Pipfile:
   $ pipenv install -e .
八、一些使用过程展示
定位项目路径:

$ pipenv --where
/Users/kennethreitz/Library/Mobile Documents/com~apple~CloudDocs/repos/kr/pipenv/test
定位虚拟环境

$ pipenv --venv
/Users/kennethreitz/.local/share/virtualenvs/test-Skyy4vre
定位Python解释器：

$ pipenv --py
/Users/kennethreitz/.local/share/virtualenvs/test-Skyy4vre/bin/python
安装包：

$ pipenv install
Creating a virtualenv for this project...
...
No package provided, installing all dependencies.
Virtualenv location: /Users/kennethreitz/.local/share/virtualenvs/test-EJkjoYts
Installing dependencies from Pipfile.lock...
...

To activate this project's virtualenv, run the following:
$ pipenv shell
安装一个开发环境中才使用的包：

$ pipenv install pytest --dev
Installing pytest...
...
Adding pytest to Pipfile's [dev-packages]...
显示依赖关系：

$ pipenv graph
requests==2.18.4
  - certifi [required: >=2017.4.17, installed: 2017.7.27.1]
  - chardet [required: >=3.0.2,<3.1.0, installed: 3.0.4]
  - idna [required: >=2.5,<2.7, installed: 2.6]
  - urllib3 [required: <1.23,>=1.21.1, installed: 1.22]
生成lock文件:

$ pipenv lock
Assuring all dependencies from Pipfile are installed...
Locking [dev-packages] dependencies...
Locking [packages] dependencies...
Note: your project now has only default [packages] installed.
To install [dev-packages], run: $ pipenv install --dev
安装开发环境依赖：

$ pipenv install --dev
Pipfile found at /Users/kennethreitz/repos/kr/pip2/test/Pipfile. Considering this to be the project home.
Pipfile.lock out of date, updating...
Assuring all dependencies from Pipfile are installed...
Locking [dev-packages] dependencies...
Locking [packages] dependencies...
卸载所有的包：

$ pipenv uninstall --all
No package provided, un-installing all dependencies.
Found 25 installed package(s), purging...
...
Environment now purged and fresh!
使用虚拟环境的shell。exit退出：

$ pipenv shell
Loading .env environment variables…
Launching subshell in virtual environment. Type 'exit' or 'Ctrl+D' to return.
$ ▯
